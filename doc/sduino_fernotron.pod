=begin html

<a name="Fernotron"></a>

<h3>Fernotron</h3>

<i>Fernotron</i> is a logic FHEM module to 1) control shutters and power plugs using Fernotron protocol and 2) use Fernotron controllers and sensors as general switches in FHEM.

<ul>
<li>Required I/O device: <i>SIGNALduino</i></li>
<li>Protocol limitations: It's uni-directional. No information of the receivers status is available. So it's not best suited for automation without user attention.</li>
<li>Pairing: Senders have 6 digit Hex-Numbers as ID.  To pair, the receiver learns IDs of its paired Senders.</li>
<li>Sending direclty: Motors have also an ID wich can be used to address messages to it without pairing.</li>
<li>



<h4>Defining Devices</h4>

<h5>1. FHEM devices to control Fernotron devices</h5>

Each output device may control a single shutter, or a group of shutters depending on the parameters given in the define statement.

<p>
  <code>
    define <my_shutter> Fernotron a=ID [g=GN] [m=MN]<br>
  </code>

<p>
  ID : the device ID. A six digit hexadecimal number. 10xxxx=plain controller, 20xxxx=sun sensor, 80xxxx=central controller unit, 90xxxx=receiver<br>
  GN : group number (1-7) or 0 (default) for all groups<br>
  MN : member number  (1-7) or  0 (default) for all group members<br>

<p>
  'g' or  'n' are only useful combined with an ID of the central controller type.

<a name="Fernotronattr"></a>
<h6>Attributes</h6>
<ul>
  <li><a name="repeats">repeats N</a><br>
        repeat sent messages N additional times to increase the chance of successfull delivery (default: 1 repeat)
  </li>
  <li><a name="create">create (default|in|out)</a><br>
       This attribute has only effect on the Fernotron default input device Fernotron_Scan or whatever you named it (default name used to be scanFerno).
       It enables auto-creating devices for input, output or none expect the default input device itself.
       Hit the STOP button on a Fernotron controller to add it as a device to FHEM.
       You may rename the created devices using rename command.
  </li>
</ul>


<h5>2. FHEM Devices controlled by Fernotron senders</h5>

<p>  Incoming data is handled by input devices. There is one default input device, who handles all messages not matchin a defined input device. The default input device will be auto-created.

<p> Input devices are defined just like output devices, but with the parameter 'input' given in the define.

<p>
  <code>
    define <my_shutter> Fernotron a=ID [g=GN] [m=MN] input[=(plain|sun|central)]<br>
  </code>
<p>
The input type (like plain) can be ommitted. Its already determined by the ID (e.g. each ID starting with 10 is a plain controller).
<ul>
 <li>defining a plain controller as switch for up/down/stop<br>
      <code>define myFernoSwitch Fernotron a=10abcd input</code></li>
<li>defining a sun sensor as on/off switch (on: sunshine, off: no sunshine)<br>
     <code>define myFernoSun Fernotron a=20abcd input </code></li>
<li>defining a switch for up/down/stop controlled by a Fernotron central unit<br>
     <code>define myFernoSwitch2 Fernotron a=80abcd g=2 m=3 input</code></li>
<li>define a notify device to toggle our light device HUEDevice3<br>
      <code>define myFernoSwitch2 Fernotron a=80abcd g=2 m=3 input</code></li>
 <li>define a notify device to toggle our light device HUEDevice3<br>
     <code>define n_toggleHUEDevice3 notify myFernoSwitch:stop set HUEDevice3 toggle</code></li>
<li>Its possible to use the default input device with your notify device, if you don't want to define specific input devices. This works only if you really had no input device defined for that Fernotron ID<br>
     <code>define n_toggleHUEDevice3 notify Fernotron_Scan:plain:10abcd:stop set HUEDevice3 toggle</code></li>
</ul>


<h4>Adressing and Pairing in Detail</h4>

<h5>Three different methods to make messsages find their target Fernotron receiver</h5>
<ol>
  <li>Scan IDs of physical Fernotron controllers you own and copy their IDs in our FHEM output devices.  Use default Input device Fernotron_Scan to scan the ID first. Then use the ID to define your device. Here we have scanned the ID of our 2411 central resulting to 801234. Now define devices by using it<br>
    <code>define myShutterGroup1 a=801234 g=1 m=0</code><br>
    <code>define myShutter11 a=801234 g=1 m=1</code><br>
    <code>define myShutter12 a=801234 g=1 m=2</code><br>
    ...
    <code>define myShutterGroup2 a=801234 g=2 m=0</code><br>
    <code>define myShutter21 a=801234 g=2 m=1</code><br>
    <code>define myShutter22 a=801234 g=2 m=2</code><br>
      </li>

  <li> Invent valid IDs and pair them with shutters. See above which IDs are needed for different kind of senders<br>
    <code>define myShutter1 a=100001</code><br>
    <code>define myShutter2 a=100002</code><br>
    Now activate Set-mode on the Fernotron receiver and send a STOP by the newly defined device you wish to pair with it.
 ...</li>

<li> Receiver IDs: RF controlled shutters may have a 5 digit code printed on or on a small cable sticker.
  Prefix that number with a 9 to get an valid ID.</li>
</ol>

<h4>Making Groups</h4>

<ol>
  <li>groups and members are the same like in 2411. Groups are adressed using the 0 as wildcard.  (g=1 m=0 or g=0 m=1 or g=0 m=0) </li>

  <li> Like with plain controllers or sun sensors. Example: a (virtual) plain controller paired with each shutter of the entire floor.</li>

  <li> not possible with receiver IDs</li>
</ol>

<h4>Commands</h4>
<ul>
  <li>up</li>
  <li>down</li>
  <li>stop</li>
  <li>set  - activate set mode to make receiver ready to pair/unpair</li>
  <li>sun-down - move to sun position (but only if sun automatic is enabled and shutter is currently above this position)</li>
  <li>sun-up - when at sun-position the shutter will be fully opened with this command (does nothing when not at sun position)</li>
  <li>sun-inst - set the current position as sun position</li>
</ul>

<ul>
<li>Attribute for alexa module:<br>
<code>attr myRollo_42 genericDeviceType blind</code><br>
<code>attr myRollo_42 alexaName Schlafzimmer Rollo</code><br>
</li>
<li>GUI buttons<br>
<code>attr myRollo_42 webCmd down:stop:up</code><br>
</li>
</ul>

=end html
