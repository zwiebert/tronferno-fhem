=encoding UTF-8

=begin html

<a name="TronfernoMCU"></a>
<h3>TronfernoMCU</h3>


<p><i>TronfernoMCU</i> ist ein physisches FHEM Gerät zum steuern von Fernotron-Empfängern und Empfang von Fernotron Sendern.
<ul>
 <li>Erzeugt das IODev benötigt von den logischen Tronferno FHEM Geräten</li>
 <li>MCU/RF-hardware/firmware: <a href="https://github.com/zwiebert/tronferno-mcu">tronferno-mcu</a></li>
 <li>Kann die Firmware flashen für den Mikrocontroller (ESP32 oder ESP8266) mit den jeweiligen SET Kommandos. (wenn über USB verbunden mit FHEM Server)</i>
 <li>Kann Mikrocontroller konfigurieren mit SET Kommandos</li>
 <li>Kann sich über Netzwerk oder USB mit dem Mikrocontroller verbinden.</li>
</ul>

<h4>Define</h4>

<p>
<code>define &lt;name&gt; TronfernoMCU (USB_PORT|IP4_ADDRESS)</code>

<ul>
<li><code> &lt;name&gt;</code> empfohlener Name: "tfmcu"</li>
<li><code>USB_PORT</code> Wenn MCU verbunden mit FHEM über USB</li>
<li><code>IP4_ADDRES</code> Wenn MCU verbunden mit FHEM über Netzwerk</li>
</ul>

<p>Dieses Gerät muss vor allen Tronferno Geräten definiert werden die es benutzen. Beim FHEM Server Start muss es vorher erzeugt werden. Alle vorher erzeugten Tronferno Geräte können nicht angelegt werden.</p>

<p>Mehrere Geräte können definiert werden wenn mehrere MCs vorhanden sind. Dann den IODev der Tronferno Geräte auf den Namen des TronfernoMCU Gerätes setzen, welches verwendet werden soll.</p>

<h5>Beispiele</h5>
<ul>
<li><code>define tfmcu TronfernoMCU /dev/ttyUSB1</code> (verbinde mit MC über USB)</li>
<li><code>define tfmcu TronfernoMCU 192.168.1.123</code> (verbinde mit MC über IP Netzwerk)</li>
</ul>

<a name="TronfernoMCUset"></a>
<h4>Set</h4>
<ul>

  <a name="mcc.all"></a>
  <li>mcc.all<br>
    Lese die komplette Konfiguration aus dem Miktrocontroller aus<br>
    <code>set tfmcu mcc.all ?</code><br></li>

  <a name="mcc.cu"></a>
  <li>mcc.cu<br>
   Programmierzentralen-ID (sechsstellige Hex Nummer im Batteriefach der 2411 Zentrale)</li>

  <a name="mcc.latitude"></a>
  <li>mcc.latitude<br>
   Breitengrad zum Berechnen der Dämmerung (Dezimal-Grad. z.B. 52.5)</li>

  <a name="mcc.longitude"></a>
  <li>mcc.longitude<br>
   Längengrad zum Berechnen der Dämmerung (Dezimal-Grad. z.B. 13.4)</li>

  <a name="mcc.restart"></a>
  <li>mcc.restart<br>
    Neustart des Controllers.</li>

  <a name="mcc.rtc"></a>
  <li>mcc.rtc<br>
    Setzen der Uhrzeit des Controllers mittels ISO Datum/Zeit (z.B. 2018-12-31T23:59:00), falls kein NTP möglich ist.</li>

  <a name="mcc.tz"></a>
  <li>mcc.tz<br>
    Zeit-Zone im POSIX (TZ) Format</li>

  <a name="mcc.verbose"></a>
  <li>mcc.verbose<br>
    Umfang der Diagnose Ausgaben des Controllers (0 .. 5)</li>

  <a name="mcc.network"></a>
  <li>mcc.network<br>
    Netzwerk zum Verbinden des Controllers: none, ap, wlan, lan<br>
<ul>
     <li>none: Kein Netzwerk</li>
     <li>ap:  Wlan Zugangspunkt erzeugen (für Erstkonfiguration)</li>
     <li>wlan: Verbinde mit vorhandenem WLAN</li>
     <li>lan: Verbinde mit Router über Ethernet</li>
     <li>Hinweis: MC wird neugestartet nach setzen einer dieser Optionen</li>
</ul></li>
  <a name="mcc.wlan-password"></a>
  <li>mcc.wlan-password<br>
    Passwort zum Verbinden mit bestehendem WLAN Netz<br>
   Hinweis: MC wird neugestartet nach setzen dieser Option</li>


  <a name="mcc.wlan-ssid"></a>
  <li>mcc.wlan-ssid<br>
    SSID es bestehenden WLAN Netzes<br>
    Hinweis: MC wird neugestartet nach setzen dieser Option</li>


  <a name="mcc.mqtt-enable"></a>
  <li>mcc.mqtt-enable - aktiviere MQTT Klient des MCs<br>
    <code>set tfmcu mcc.mqtt-enable 1</code><br>
    <code>set tfmcu mcc.mqtt-enable 0</code><br>
<br>
    <code>attr MQTT2_tronferno42 setList cli tfmcu/cli $EVENT</code><br>
    <code>set MQTT2_tronferno42 cli send g=4 m=2 c=down</code><br>
<br>
    <small>Hinweis: ESP32 und ESP8266</small><br>
    </li>

  <a name="mcc.mqtt-url"></a>
  <li>mcc.mqtt-url - URL des MQTT Brokers/Servers<br>
    <code>set tfmcu mcc.mqtt-url "mqtt://192.168.1.42:7777"</code>
    </li>

  <a name="mcc.mqtt-user"></a>
  <li>mcc.mqtt-user - Username für Login beim MQTT Server/Broker<br>
    <code>set tfmcu mcc.mqtt-user myUserName</code>
    </li>

  <a name="mcc.mqtt-password"></a>
  <li>mcc.mqtt-password - Passwort für Login beim MQTT Server/Broker<br>
    <code>set tfmcu mcc.mqtt-password myPassword</code>
    </li>

  <a name="mcc.http-enable"></a>
  <li>mcc.http-enable - aktiviert den Webserver des MCs (Browseroberfläche)<br>
    <code>set tfmcu mcc.http-enable 1</code><br>
    <code>set tfmcu mcc.http-enable 0</code><br>
<br>
    <small>Hinweis: Nur ESP32</small><br>
    </li>

  <a name="mcc.http-user"></a>
  <li>mcc.http-user - Optionaler Webserver Benutzername zur Authentifizierung<br>
    <code>set tfmcu mcc.http-user myUserName</code>
    </li>

  <a name="mcc.http-password"></a>
  <li>mcc.http-password -  Optionales Webserver Benutzerpasswort zur Authentifizierung<br>
    <code>set tfmcu mcc.http-password myPassword</code>
    </li>

  <a name="mcu-firmware.esp32"></a>
  <li>mcu-firmware.esp32<br>
   Download der letzten MC firmware von GitHub(tronferno-mcu-bin) und Flashen
    <ul>
     <li>download<br>
         Download Firmware und Flash-Programm.<br>
         Dateien werden kopiert nach /tmp/TronfernoMCU<br>
         Status ist sichtbar im Reading fw_get (run,done,error,timeout).</li>
     <li>write-flash<br>
         Flasht die Firmware über den USB Port definiert in diesem Gerät.<br>
         Benötigt: python, pyserial; <code>apt install python  python-serial</code><br>
         MCU: ESP32/4MB/WLAN angeschlossen über USB.<br>
         Status ist sichtbar im Reading fw_write_flash (run,done,error,timeout).</li>
     <li>upgrade<br>
        Kombiniert download und flashen in einem Schritt.
         </li>
     <li>xxx.erase-flash<br>
          Optional: Löschen des FLASH-ROM. Alle gespeicherten Daten auf dem MC gehen verloren!</br>
         Benötigt: python, pyserial; <code>apt install python  python-serial</code><br>
         Status ist sichtbar im Reading fw_erase_flash (run,done,error,timeout).</li>
     <li>download-beta-version<br>
         Download der letzten beta-firmware und Flash Programm.<br>
         Dateien werden kopiert nach /tmp/TronfernoMCU<br>
         Status ist sichtbar im Reading fw_get (run,done,error,timeout).</li>
    </ul>
  </li>

  <a name="mcu-firmware.esp8266"></a>
  <li>mcu-firmware.esp8266<br>
  Download der letzten MC firmware von GitHub(tronferno-mcu-bin) und Flashen
    <ul>
     <li>download<br>
         Download Firmware und Flash-Programm.<br>
         Dateien werden kopiert nach /tmp/TronfernoMCU<br>
         Status ist sichtbar im Reading fw_get (run,done,error,timeout).</li>
     <li>write-flash<br>
         Flasht die Firmware über den USB Port definiert in diesem Gerät.<br>
         Benötigt: python, pyserial; <code>apt install python  python-serial</code><br>
         MCU: ESP8266/4MB/WLAN angeschlossen über USB.<br>
         Status ist sichtbar im Reading fw_write_flash (run,done,error,timeout).</li>
     <li>upgrade<br>
        Kombiniert download und flashen in einem Schritt.
         </li>
     <li>xxx.erase-flash<br>
          Optional: Löschen des FLASH-ROM. Alles gespeicherten Daten auf dem MC gehen verloren!</br>
         Benötigt: python, pyserial; <code>apt install python  python-serial</code><br>
         Status ist sichtbar im Reading fw_erase_flash (run,done,error,timeout).</li>
     <li>download-beta-version<br>
         Download der letzten beta-firmware und Flash Programm.<br>
         Dateien werden kopiert nach /tmp/TronfernoMCU<br>
         Status ist sichtbar im Reading fw_get (run,done,error,timeout).</li>
    </ul>
  </li>


</ul>

=end html
