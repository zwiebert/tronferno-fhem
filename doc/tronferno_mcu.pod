=begin html

<a name="TronfernoMCU"></a>
<h3>TronfernoMCU</h3>


<p><i>TronfernoMCU</i> is a physical Device for the purpose of 1) controlling Fernotron devices or 2) utilizing Fernotron controllers into FHEM.
<ul>
 <li>Provides the IODev requiered by Tronferno logical devices</li>
 <li>Requiered MCU/RF-hardware: <a href="https://github.com/zwiebert/tronferno-mcu">tronferno-mcu</a></li>
 <li>Can flash the MCU (ESP32 or ESP8266) using the respective SET command. (if conected to FHEM by USB)</i>
 <li>Can configure the MCU using SET commands</li>
 <li>Can connect to MCU by 1) USB or 2) WLAN.</li>
</ul>

<p>
<a name="TronfernoMCUset"></a>
<h4>SET</h4>
<ul>

  <a name="mcc.baud"></a>
  <li>mcc.baud<br>
    Baud rate of MCU's serial interface</li>

  <a name="mcc.cu"></a>
  <li>mcc.cu<br>
   Central-Unit ID used by the MCU (six digit hex number)</li>


  <a name="mcc.latitude"></a>
  <li>mcc.latitude<br>
   geographical coordinates are used to calculate civil dusk for astro-timer (decimal degree, e.g. 52.5)</li>

  <a name="mcc.longitude"></a>
  <li>mcc.longitude<br>
   geographical coordinates are used to calculate civil dusk for astro-timer (decimal degree, e.g. 13.4)</li>

  <a name="mcc.restart"></a>
  <li>mcc.restart<br>
    Retart the MCU.</li>

  <a name="mcc.rtc"></a>
  <li>mcc.rtc<br>
    Set MCU's internal real time clock by ISO date/time string (e.g. 1999-12-31T23:59:00). If possible, the MCU will use NTP instead.</li>

  <a name="mcc.rtc"></a>
  <li>mcc.rtc<br>
    Set MCU's internal real time clock by ISO date/time string (e.g. 1999-12-31T23:59:00). If possible, the MCU will use NTP instead.</li>

  <a name="mcc.tz"></a>
  <li>mcc.tz<br>
    Time-zone in POSIX (TZ) format</li>

  <a name="mcc.rtc"></a>
  <li>mcc.rtc<br>
    </li>

  <a name="mcc.verbose"></a>
  <li>mcc.verbose<br>
    Verbosity level of MCU's diagnose output (0 .. 5)</li>

  <a name="mcc.network"></a>
  <li>mcc.network<br>
    Network to connect: none, ap, wlan, lan<br>
     ap: Create Wlan accesspoint<br>
     wlan: connect to existing WLAN<br>
     lan: Ethernet<br>
     Note: MCU will be restarted after setting this option</li>

  <a name="mcc.wlan-password"></a>
  <li>mcc.wlan-passord<br>
    Password used by MCU to connect to WLAN/WiFi<br>
    Note: MCU will be restarted after setting this option </li>

  <a name="mcc.wlan-ssid"></a>
  <li>mcc.wlan-ssid<br>
    WLAN/WiFi SSID to connect to<br>
    Note: MCU will be restarted after setting this option</li>

  <a name="mcc.mqtt-enable"></a>
  <li>mcc.mqtt-enable - enables/disables builtin MQTT client<br>
    <code>set tfmc mcc.mqtt-enable 1</code><br>
    <code>set tfmc mcc.mqtt-enable 0</code><br>
<br>
    <code>attr MQTT2_tronferno42 setList cli tfmcu/cli $EVENT</code><br>
    <code>set MQTT2_tronferno42 cli send g=4 m=2 c=down</code><br>
<br>
    <small>MQTT support is still experimental.</small><br>
    <small>Note: MQTT is only supportet on esp32 hardware (for now)</small><br>
    </li>

  <a name="mcc.mqtt-url"></a>
  <li>mcc.mqtt-url - URL of MQTT server to connect<br>
    <code>set tfmcu mcc.mqtt-url "mqtt://192.168.1.42:7777"</code>
    </li>

  <a name="mcc.mqtt-user"></a>
  <li>mcc.mqtt-user - User name for MQTT server connection<br>
    <code>set tfmcu mcc.mqtt-user myUserName</code>
    </li>

  <a name="mcc.mqtt-password"></a>
  <li>mcc.mqtt-password - Password for MQTT server connection<br>
    <code>set tfmcu mcc.mqtt-password myPassword</code>
    </li>

  <a name="mcc.http-enable"></a>
  <li>mcc.http-enable - enables/disables builtin HTTP server<br>
    <code>set tfmc mcc.http-enable 1</code><br>
    <code>set tfmc mcc.http-enable 0</code><br>
<br>
    <small>HTTP support is still experimental.</small><br>
    <small>Note: HTTP is only supportet on esp32 hardware (for now)</small><br>
    </li>

  <a name="mcc.http-user"></a>
  <li>mcc.http-user - set optional HTTP login user name<br>
    <code>set tfmcu mcc.http-user myUserName</code>
    </li>

  <a name="mcc.http-password"></a>
  <li>mcc.http-password - set optional HTTP login password<br>
    <code>set tfmcu mcc.http-password myPassword</code>
    </li>

  <a name="mcu-firmware.esp32"></a>
  <li>mcu-firmware.esp32<br>

   Fetch and write latest MCU firmware from tronferno-mcu-bin github repository.
    <ul>
     <li>download<br>
         Downloads firmware and flash-tool from github.<br>
         Files can be found at /tmp/TronfernoMCU<br>
         Status is shown in reading fw_get (run,done,error,timeout).</li>
     <li>write-flash<br>
         Writes downloaded firmware to serial port used in definition of this device.<br>
         Required Tools: python, pyserial; <code>apt install python  python-serial</code><br>
         Expected MCU: Plain ESP32 with 4MB flash. Edit the flash_esp32.sh command for different hardware.<br>
         Status is shown in reading fw_write_flash (run,done,error,timeout). Shell output may be displayed at error in Internals.</li>
     <li>upgrade<br>
        Combines download and write-flash for convinience.
         </li>
     <li>xxx.erase-flash<br>
          Optional Step before write-flash: Use downloaded tool to delete the MCU's flash memory content. All saved data in MCU will be lost.<br>
         Required Tools: python, pyserial; <code>apt install python  python-serial</code><br>
         Status is shown in reading fw_erase_flash (run,done,error,timeout). Shell output may be displayed at error in Internals.</li>
     <li>download-beta-version<br>
         Downloads beta-firmware and flash-tool from github.<br>
         Files can be found at /tmp/TronfernoMCU<br>
         Status is shown in reading fw_get (run,done,error,timeout).</li>
    </ul>
  </li>

  <a name="mcu-firmware.esp8266"></a>
  <li>mcu-firmware.esp8266<br>
   Fetch and write latest MCU firmware from tronferno-mcu-bin github repository.
    <ul>
     <li>download<br>
         Downloads firmware and flash-tool from github.<br>
         Files can be found at /tmp/TronfernoMCU<br>
         Status is shown in reading fw_get (run,done,error,timeout).</li>
     <li>write-flash<br>
         Writes downloaded firmware to serial port used in definition of this device.<br>
         Required Tools: python, pyserial; <code>apt install python  python-serial</code><br>
         Expected MCU: Plain ESP8266 with 4MB flash. Edit the flash_esp32.sh command for different hardware.<br>
         Status is shown in reading fw_write_flash (run,done,error,timeout). Shell output may be displayed at error in Internals.</li>
     <li>upgrade<br>
        Combines download and write-flash for convinience.
     <li>xxx.erase-flash<br>
          Optional Step before write-flash: Use downloaded tool to delete the MCU's flash memory content. All saved data in MCU will be lost.<br>
         Required Tools: python, pyserial; <code>apt install python  python-serial</code><br>
         Status is shown in reading fw_erase_flash (run,done,error,timeout). Shell output may be displayed at error in Internals.</li>
     <li>download-beta-version<br>
         Downloads beta-firmware and flash-tool from github.<br>
         Files can be found at /tmp/TronfernoMCU<br>
         Status is shown in reading fw_get (run,done,error,timeout).</li>
    </ul>
  </li>


</ul>

<br>     Examples:
<br>
<br> 1) MCU module is connected via TCP/IP
<br>
<br>    define tfmcu TronfernoMCU  192.168.1.123
<br>    define shutter_11 Tronferno g=1 m=1
<br>    define shutter_12 Tronferno g=1 m=2
<br>     ..
<br>    define shutter_77 Tronferno g=7 m=7
<br>
<br> 2) MCU module is connected via USB port /dev/ttyUSB1
<br>
<br>    define tfmcu TronfernoMCU /dev/ttyUSB1
<br>    define shutter_11 Tronferno g=1 m=1
<br>    define shutter_12 Tronferno g=1 m=2
<br>     ..
<br>    define shutter_77 Tronferno g=7 m=7
<br>
<br>  ### Make sure the I/O device tfmcu is defined before any shutter_xx device ###
<br>  ### Otherwise the shutter_xx devices can't find their I/O device (because its not defined yet) ###

<p>

=end html
