=begin html

<a name="TronfernoMCU"></a>
<h3>TronfernoMCU</h3>

<p><i>TronfernoMCU</i> is a physical device to connect Tronferno-MCU hardware..
<ul>
 <li>Implements the IODev requiered by Tronferno logical devices</li>
 <li>Requires MCU/RF-hardware: <a href="https://github.com/zwiebert/tronferno-mcu">tronferno-mcu</a></li>
 <li>Is able to download, flash (if connected to USB) and configure the MCU firmware</i>
</ul>


<h4>Define</h4>

<p>
<code>define &lt;name&gt; TronfernoMCU (USB_PORT|IP4_ADDRESS)</code>

<ul>
<li><code> &lt;name&gt;</code> the suggested name is "tfmcu"</li>
<li><code>USB_PORT</code> if MCU is connected to FHEM server by USB</li>
<li><code>IP4_ADDRES</code> if MCU is connected to FHEM server by network</li>
</ul>

<p>Make sure this device is defined before any Tronferno devices. At FHEM startup it needs to be created first, or any Fernotron devices defined prior will fail to be created</p>

<p> Multiple devices can be defined if you have multiple MCU units connected. Then the IODev of a Tronferno device has to be set to the name of the correct TronfernoMCU device it is supposed to use</p>

<h5>Examples</h5>
<ul>
<li><code>define tfmcu TronfernoMCU /dev/ttyUSB1</code> (connect device by USB cable)</li>
<li><code>define tfmcu TronfernoMCU 192.168.1.123</code> (connect device by IP network)</li>
</ul>

<a name="TronfernoMCUreadings"></a>
<h4>Readings</h4>
<ul>
   <li>mcu.ip4-address - Last known IPv4 address of the MCU</li>
   <li>mcu.connection - State of connection to MCU: closed, connecting, usb, tcp, reconnecting, error:MSG</li>
   <li>mcu.firmware.fetch - status of downloading firmware: run,done,error,timeout</li>
   <li>mcu.firmware.write - status of writing firmware: run,done,error,timeout</li>
   <li>mcu.firmware.erase - status of erassing entire Flash-ROM: run,done,error,timeout</li>
</ul>

<a name="TronfernoMCUset"></a>
<h4>Set</h4>
<ul>

  <a name="mcc.all"></a>
  <li>mcc.all<br>
    Get all configuration data from MCU<br>
    <code>set tfmcu mcc.all ?</code><br></li>

  <a name="mcc.baud"></a>
  <li>mcc.baud<br>
    Baud rate of MCU's serial interface</li>

  <a name="mcc.cu"></a>
  <li>mcc.cu<br>
   Central-Unit ID used by the MCU (six digit hex number)</li>


  <a name="mcc.latitude"></a>
  <li>mcc.latitude<br>
   geographical coordinates are used to calculate civil dusk for astro-timer (decimal degree, e.g. 52.5)</li>

  <a name="mcc.longitude"></a>
  <li>mcc.longitude<br>
   geographical coordinates are used to calculate civil dusk for astro-timer (decimal degree, e.g. 13.4)</li>

  <a name="mcc.restart"></a>
  <li>mcc.restart<br>
    Retart the MCU.</li>

  <a name="mcc.rtc"></a>
  <li>mcc.rtc<br>
    Set MCU's internal real time clock by ISO date/time string (e.g. 1999-12-31T23:59:00). If possible, the MCU will use NTP instead.</li>

  <a name="mcc.tz"></a>
  <li>mcc.tz<br>
    Time-zone in POSIX (TZ) format</li>

  <a name="mcc.verbose"></a>
  <li>mcc.verbose<br>
    Verbosity level of MCU's diagnose output (0 .. 5)</li>

  <a name="mcc.network"></a>
  <li>mcc.network<br>
    Network to connect: none, ap, wlan, lan<br>
<ul>
     <li>none: no networking</li>
     <li>ap: create WLAN accesspoint</li>
     <li>wlan: connect to existing WLAN</li>
     <li>lan: connect to Router via Ethernet</li>
</ul>
     <small>(MCU will be restarted after setting this option)</small><br>
</li>

  <a name="mcc.wlan-password"></a>
  <li>mcc.wlan-passord<br>
    Password used by MCU to connect to WLAN/WiFi<br>
    <small>(MCU will be restarted after setting this option)</small><br></li>

  <a name="mcc.wlan-ssid"></a>
  <li>mcc.wlan-ssid<br>
    WLAN/WiFi SSID to connect to<br>
    <small>(MCU will be restarted after setting this option)</small><br></li>

  <a name="mcc.mqtt-enable"></a>
  <li>mcc.mqtt-enable - enables/disables builtin MQTT client<br>
    <code>set tfmcu mcc.mqtt-enable 1</code><br>
    <code>set tfmcu mcc.mqtt-enable 0</code><br>
<br>
    <code>attr MQTT2_tronferno42 setList cli tfmcu/cli $EVENT</code><br>
    <code>set MQTT2_tronferno42 cli send g=4 m=2 c=down</code><br>
<br>
    </li>

  <a name="mcc.mqtt-url"></a>
  <li>mcc.mqtt-url - URL of MQTT server to connect<br>
    <code>set tfmcu mcc.mqtt-url "mqtt://192.168.1.42:7777"</code>
    </li>

  <a name="mcc.mqtt-user"></a>
  <li>mcc.mqtt-user - User name for MQTT server connection<br>
    <code>set tfmcu mcc.mqtt-user myUserName</code>
    </li>

  <a name="mcc.mqtt-password"></a>
  <li>mcc.mqtt-password - Password for MQTT server connection<br>
    <code>set tfmcu mcc.mqtt-password myPassword</code>
    </li>


  <a name="mcc.http-enable"></a>
  <li>mcc.http-enable - enables/disables builtin webserver<br>
    <code>set tfmcu mcc.http-enable 1</code><br>
    <code>set tfmcu mcc.http-enable 0</code><br>
    </li>

  <a name="mcc.http-user"></a>
  <li>mcc.http-user - set optional webserver login user name<br>
    <code>set tfmcu mcc.http-user myUserName</code>
    </li>

  <a name="mcc.http-password"></a>
  <li>mcc.http-password - set optional webserver login password<br>
    <code>set tfmcu mcc.http-password myPassword</code>
    </li>

  <a name="mcu-firmware.esp32"></a>
  <li>mcu-firmware.esp32<br>

   Fetch and write latest MCU firmware from tronferno-mcu-bin github repository.
    <ul>
     <li>download<br>
         Downloads firmware and flash-tool from github.<br>
         Files can be found at /tmp/TronfernoMCU</li>
     <li>write-flash<br>
         Writes downloaded firmware to serial port used in definition of this device.<br>
         Required Tools: python, pyserial; <code>apt install python  python-serial</code><br>
         Expected MCU: ESP32 with 4MB flash. Edit the flash_esp32.sh command for different hardware.</li>
     <li>upgrade<br>
        Combines download and write-flash for convinience.
         </li>
     <li>xxx.erase-flash<br>
          Optional Step before write-flash: Use downloaded tool to delete the MCU's flash memory content. All saved data in MCU will be lost.<br>
         Required Tools: python, pyserial; <code>apt install python  python-serial</code><br>
         Status is shown in reading fw_erase_flash (run,done,error,timeout). Shell output may be displayed at error in Internals.</li>
     <li>download-beta-version<br>
         Downloads beta-firmware and flash-tool from github.<br>
         Files can be found at /tmp/TronfernoMCU<br>
         Status is shown in reading fw_get (run,done,error,timeout).</li>
    </ul>
  </li>

</ul>

=end html
